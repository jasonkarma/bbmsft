//
// BMSwift Project Guidelines
//

import Foundation

/// # API Structure and Implementation Guidelines
enum ProjectGuidelines {
    
    /// ## 1.1 API Structure
    /// - Use enum-based endpoint organization
    /// - Keep request/response types within feature namespaces
    /// - Define clear endpoint interfaces
    /// Example:
    /// ```swift
    /// public enum AuthEndpoints {
    ///     public struct Login: APIEndpoint {
    ///         public typealias RequestType = LoginRequest
    ///         public typealias ResponseType = LoginResponse
    ///         
    ///         public let path: String = "/api/login"
    ///         public let method: HTTPMethod = .post
    ///     }
    /// }
    /// ```
    enum APIStructure {}
    
    /// ## 1.2 Type System
    /// - Make types explicitly public only when needed
    /// - Use internal access by default
    /// - Add public initializers for public types
    /// - Keep implementations private
    /// Example:
    /// ```swift
    /// public struct LoginRequest: Codable {
    ///     public let email: String
    ///     internal let timestamp: Date
    ///     
    ///     public init(email: String) {
    ///         self.email = email
    ///         self.timestamp = Date()
    ///     }
    /// }
    /// ```
    enum TypeSystem {}
    
    /// ## 1.3 Service Layer
    /// - Define protocol first, implement second
    /// - Use dependency injection
    /// - Keep implementation details private
    /// - Support testing through protocols
    /// Example:
    /// ```swift
    /// public protocol AuthService {
    ///     func login(...) async throws -> LoginResponse
    /// }
    /// 
    /// final class AuthServiceImpl: AuthService {
    ///     private let client: NetworkClient
    ///     private let cache: Cache
    /// }
    /// ```
    enum ServiceLayer {}
    
    /// ## 1.4 Error Handling
    /// - Define feature-specific error types
    /// - Use structured error handling
    /// - Provide user-friendly messages
    /// Example:
    /// ```swift
    /// public enum AuthError: LocalizedError {
    ///     case invalidCredentials
    ///     case accountLocked
    ///     case networkError(Error)
    ///     
    ///     public var errorDescription: String? {
    ///         switch self {
    ///         case .invalidCredentials: 
    ///             return "Invalid email or password"
    ///         case .accountLocked:
    ///             return "Account has been locked"
    ///         case .networkError(let error):
    ///             return "Network error: \(error.localizedDescription)"
    ///         }
    ///     }
    /// }
    /// ```
    enum ErrorHandling {}
    
    /// ## 1.5 ViewModels
    /// - Keep ViewModels focused and small
    /// - Handle all UI states
    /// - Use proper state management
    /// - Support testing
    /// Example:
    /// ```swift
    /// @MainActor
    /// final class LoginViewModel: ObservableObject {
    ///     @Published private(set) var state: ViewState = .idle
    ///     private let service: AuthService
    ///     
    ///     func login() async {
    ///         state = .loading
    ///         do {
    ///             let result = try await service.login()
    ///             state = .success(result)
    ///         } catch let error as AuthError {
    ///             state = .error(error)
    ///         }
    ///     }
    /// }
    /// ```
    enum ViewModels {}
    
    /// ## 1.6 Views
    /// - Keep views small and focused
    /// - Extract reusable components
    /// - Use proper view modifiers
    /// - Follow SwiftUI best practices
    /// Example:
    /// ```swift
    /// struct LoginView: View {
    ///     @StateObject private var viewModel: LoginViewModel
    ///     
    ///     var body: some View {
    ///         switch viewModel.state {
    ///         case .loading:
    ///             ProgressView()
    ///         case .error(let error):
    ///             ErrorView(error: error)
    ///         case .success:
    ///             ContentView()
    ///         }
    ///     }
    /// }
    /// ```
    enum Views {}
    
    /// # 2. Project Organization
    enum Organization {
        /// ## 2.1 Feature Structure
        /// ```
        /// Features/
        ///   FeatureName/
        ///     ├── Internal/
        ///     │   └── Endpoints.swift
        ///     ├── Services/
        ///     │   └── Service.swift
        ///     ├── ViewModels/
        ///     │   └── ViewModel.swift
        ///     └── Views/
        ///         └── View.swift
        /// ```
        enum Structure {}
        
        /// ## 2.2 Naming Conventions
        /// - Endpoints: {Feature}Endpoints
        /// - Services: {Feature}Service
        /// - ViewModels: {Feature}ViewModel
        /// - Views: Descriptive names
        enum Naming {}
    }
    
    /// # 3. Common Pitfalls
    enum Pitfalls {
        /// ## 3.1 Type Safety
        /// - Avoid force unwrapping
        /// - Use proper optionals
        /// - Leverage type system
        enum TypeSafety {}
        
        /// ## 3.2 Memory Management
        /// - Watch for retain cycles
        /// - Use weak/unowned properly
        /// - Clean up subscriptions
        enum Memory {}
        
        /// ## 3.3 Testing
        /// - Test all public interfaces
        /// - Mock dependencies
        /// - Test error scenarios
        enum Testing {}
    }
}
