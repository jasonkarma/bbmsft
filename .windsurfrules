# BMSwift Project Guidelines

## 1. Architecture & Frameworks
1. Primary UI Framework
   - Use SwiftUI for primary UI development
   - Use UIKit components when needed through UIViewRepresentable
   - Document UIKit usage and justification

2. Networking
   - Use Network.framework for all network operations
   - Centralize API handling in NetworkService
   - All network models must be in NetworkModels module
   - Use async/await for network calls

3. Module Structure
   - NetworkModels: All API models, requests, responses
   - Services: NetworkService and other service layers
   - Features: View-ViewModel pairs by feature
   - Theme: Global styling and design system
   - Extensions: Framework extensions

# BMSwift Project Structure & Guidelines

## 1. Project Directory Structure
```swift
BMSwift/
├── App/
│   ├── BMSwiftApp.swift
│   ├── SceneDelegate.swift
│   ├── AppDelegate.swift
│   └── Configuration/
│       ├── Debug.xcconfig
│       ├── Release.xcconfig
│       └── Info.plist
├── Features/
│   ├── Auth/
│   │   ├── Views/
│   │   │   ├── LoginView.swift
│   │   │   └── SignUpView.swift
│   │   └── ViewModels/
│   │       ├── LoginViewModel.swift
│   │       └── SignUpViewModel.swift
│   ├── Profile/
│   │   ├── Views/
│   │   └── ViewModels/
│   └── Media/
│       ├── Views/
│       │   ├── CameraView.swift
│       │   ├── PhotoLibraryView.swift
│       │   └── AudioRecorderView.swift
│       └── ViewModels/
│           ├── CameraViewModel.swift
│           ├── PhotoLibraryViewModel.swift
│           └── AudioRecorderViewModel.swift
├── Services/
│   ├── Network/
│   │   ├── Base/
│   │   │   ├── NetworkService.swift
│   │   │   ├── APIEndpoint.swift
│   │   │   └── NetworkMonitor.swift
│   │   └── APIs/
│   │       ├── AuthAPI.swift
│   │       ├── UserAPI.swift
│   │       └── MediaAPI.swift
│   ├── Permissions/
│   │   └── PermissionService.swift
│   ├── Media/
│   │   ├── CameraService.swift
│   │   ├── PhotoLibraryService.swift
│   │   └── AudioService.swift
│   └── Bluetooth/
│       └── BluetoothService.swift
├── Theme/
│   ├── AppColors.swift
│   ├── AppFonts.swift
│   ├── AppDimensions.swift
│   └── AppStyles.swift
├── Components/
│   ├── UIKit/
│   │   ├── CustomTextField.swift
│   │   ├── CustomImagePicker.swift
│   │   └── CustomCameraView.swift
│   └── SwiftUI/
│       ├── LoadingView.swift
│       ├── ErrorView.swift
│       └── PermissionRequestView.swift
├── Extensions/
│   ├── UIKit/
│   │   ├── UIImage+Extensions.swift
│   │   └── UIViewController+Extensions.swift
│   └── SwiftUI/
│       └── View+Extensions.swift
├── Models/
│   ├── NetworkModels/
│   │   ├── Auth/
│   │   │   ├── LoginModels.swift
│   │   │   └── SignUpModels.swift
│   │   ├── User/
│   │   │   └── UserModels.swift
│   │   └── Media/
│   │       └── MediaModels.swift
│   └── Local/
│       ├── UserSettings.swift
│       └── AppState.swift
├── Utilities/
│   ├── Constants.swift
│   ├── Logger.swift
│   └── Helpers/
│       ├── MediaHelper.swift
│       └── DateHelper.swift
└── Resources/
    ├── Assets.xcassets/
    └── Localizable.strings


3. Coding Standards
Network Layer
1.API Handling

// NetworkModels module
public struct APIRequest<T: Codable> {
    public let endpoint: String
    public let method: HTTPMethod
    public let body: T?
}

// NetworkService
public final class NetworkService {
    public static let shared = NetworkService()
    private let baseURL: String
    
    public func request<T: Codable>(_ request: APIRequest<T>) async throws -> T
}

2.Error Handling
Use NetworkError enum for all network-related errors
Provide meaningful error messages
Handle all error cases in ViewModels

UIKit Integration
1.UIKit Components
struct CustomTextField: UIViewRepresentable {
    // Always implement Coordinator for UIKit delegates
    class Coordinator: NSObject, UITextFieldDelegate {
        // Implement delegate methods
    }
    
    // Configuration
    func makeUIView(context: Context) -> UITextField
    func updateUIView(_ uiView: UITextField, context: Context)
}
2.Styling
Use AppColors for all colors (UIKit and SwiftUI)
Define common styles in Theme module
Create extensions for UIKit styling consistency
4. Documentation Requirements
1.File Headers
/// BMSwift - [Feature Name]
/// [Brief description]
///
/// Dependencies:
/// - UIKit: [Reason for usage]
/// - NetworkModels: [Data models used]
/// - SwiftUI: [UI components used]
2.Network Models
/// Represents a login request to the API
public struct LoginRequest: Codable {
    /// User's email address
    public let email: String
    /// User's password (never stored)
    public let password: String
}
5. Testing Requirements
1.Network Layer
 Mock NetworkService for testing
 Test all error cases
 Test request/response parsing
2.UI Components
 Test UIKit integrations
 Test SwiftUI views
 Test view state management
6. Build & Deployment
1.Configuration
 Separate development and production environments
 Use xcconfig files for build settings
 Document all required capabilities
2.App Store
 Follow App Store guidelines
 Prepare privacy declarations
 Document submission requirements


and also this app is using Chinese(traditional) for the language